package com.nhnacademy;

import java.util.regex.Pattern;

public class IPAdressVaildator {
    
    private static final String IPV4_REGEX =
            "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
            "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
            "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
            "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";

    // IPv6 정규 표현식
    private static final String IPV6_REGEX =
            "([0-9a-fA-F]{1,4}:){7}([0-9a-fA-F]{1,4}|:)" +
            "|([0-9a-fA-F]{1,4}:){6}(:[0-9a-fA-F]{1,4}|((25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)){3})|:)" +
            "|([0-9a-fA-F]{1,4}:){5}(((:[0-9a-fA-F]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)){3})|:)" +
            "|([0-9a-fA-F]{1,4}:){4}(((:[0-9a-fA-F]{1,4}){1,3})|((:[0-9a-fA-F]{1,4})?:((25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)){3}))|:)" +
            "|([0-9a-fA-F]{1,4}:){3}(((:[0-9a-fA-F]{1,4}){1,4})|((:[0-9a-fA-F]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)){3}))|:)" +
            "|([0-9a-fA-F]{1,4}:){2}(((:[0-9a-fA-F]{1,4}){1,5})|((:[0-9a-fA-F]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)){3}))|:)" +
            "|[0-9a-fA-F]{1,4}:(((:[0-9a-fA-F]{1,4}){1,6})|((:[0-9a-fA-F]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)){3}))|:)" +
            "|:(((:[0-9a-fA-F]{1,4}){1,7})|((:[0-9a-fA-F]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)){3}))|:)" +
            "|::(((:[0-9a-fA-F]{1,4}){1,7})|((:[0-9a-fA-F]{1,4}){0,6}:((25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)){3}))|:)";

    // IPv4 및 IPv6 패턴 객체 생성
    private static final Pattern IPV4_PATTERN = Pattern.compile(IPV4_REGEX);
    private static final Pattern IPV6_PATTERN = Pattern.compile(IPV6_REGEX);

    // 문자열이 IPv4 주소 형식인지 확인하는 메서드
    public static boolean isIPv4(String ipAddress) {
        return IPV4_PATTERN.matcher(ipAddress).matches();
    }

    // 문자열이 IPv6 주소 형식인지 확인하는 메서드
    public static boolean isIPv6(String ipAddress) {
        return IPV6_PATTERN.matcher(ipAddress).matches();
    }

    // 문자열이 IPv4 또는 IPv6 주소 형식인지 확인하는 메서드
    public static boolean isIPAddress(String ipAddress) {
        return isIPv4(ipAddress) || isIPv6(ipAddress);
    }
}
